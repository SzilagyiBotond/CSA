     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global _biggest     
     5                                  
     6                                  ; declare external functions needed by our program
     7                                     ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     8                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
     9                                  
    10                                  
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data public data use32 class=data
    14                                      ; ...
    15                                  
    16                                  ; our code starts here
    17                                  segment code public code use32 class=code
    18                                      _biggest:
    19                                          ; ...
    20                                          ;push ebp
    21                                          ;mov ebp,esp
    22                                          ; ebp - return address - array - number
    23 00000000 BB00000000                      mov ebx,0
    24 00000005 8B4C2404                        mov ecx,[esp+4] ; number of elements
    25 00000009 8B742408                        mov esi,[esp+8] ; array 
    26 0000000D B3FF                            mov bl,0ffh
    27                                          bigger:
    28 0000000F 3A1E                            cmp bl,byte[esi]
    29 00000011 7F02                            jg dont_add
    30 00000013 8A1E                            mov bl,[esi]
    31                                          dont_add:
    32 00000015 46                              inc esi
    33 00000016 E2F7                            loop bigger
    34 00000018 89D8                            mov eax,ebx
    35                                          ;mov esp,ebp
    36                                          ;pop ebp
    37 0000001A C3                              ret
    38                                          ; exit(0)
    39                                          
