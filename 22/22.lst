     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fread,fopen,fclose,fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fread msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import fprintf msvcrt.dll
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 696E7075742E747874-         input_file_name db "input.txt",0
    16 00000009 00                 
    17 0000000A 6F75747075742E7478-         output_file_name db "output.txt",0
    17 00000013 7400               
    18 00000015 7200                        input_file_access db "r",0
    19 00000017 7700                        output_file_access db "w",0
    20 00000019 FFFFFFFF                    input_file_descriptor dd -1
    21 0000001D FFFFFFFF                    output_file_descriptor dd -1
    22 00000021 <res 00000064>              number resb 100
    23 00000085 257300                      input_format db "%s",0
    24 00000088 25640A00                    output_format db "%d",0ah,0
    25 0000008C 00000000                    digit dd 0
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30 00000000 68[15000000]                    push dword input_file_access
    31 00000005 68[00000000]                    push dword input_file_name
    32 0000000A FF15[00000000]                  call [fopen]
    33 00000010 83C408                          add esp,4*2
    34                                          
    35 00000013 A3[19000000]                    mov [input_file_descriptor],eax
    36 00000018 83F800                          cmp eax,0
    37 0000001B 0F848E000000                    je final
    38                                          
    39 00000021 FF35[19000000]                  push dword [input_file_descriptor]
    40 00000027 6A64                            push dword 100
    41 00000029 6A01                            push dword 1
    42 0000002B 68[21000000]                    push dword number
    43 00000030 FF15[00000000]                  call [fread]
    44 00000036 83C410                          add esp,4*4
    45                                          
    46 00000039 FF35[19000000]                  push dword [input_file_descriptor]
    47 0000003F FF15[00000000]                  call [fclose]
    48 00000045 83C404                          add esp,4
    49                                          
    50 00000048 68[17000000]                    push dword output_file_access
    51 0000004D 68[0A000000]                    push dword output_file_name
    52 00000052 FF15[00000000]                  call [fopen]
    53                                          
    54 00000058 A3[1D000000]                    mov [output_file_descriptor],eax
    55 0000005D 83F800                          cmp eax,0
    56 00000060 744D                            je final
    57                                          
    58 00000062 BE[21000000]                    mov esi,number
    59 00000067 B964000000                      mov ecx,100
    60                                          write:
    61 0000006C 803E00                          cmp byte[esi],0
    62 0000006F 743E                            je out_of_loop
    63 00000071 51                              push ecx
    64 00000072 8A06                            mov al,[esi]
    65 00000074 2C30                            sub al,48
    66 00000076 A2[8C000000]                    mov [digit],al
    67 0000007B FF35[8C000000]                  push dword [digit]
    68 00000081 68[88000000]                    push dword output_format
    69 00000086 FF35[1D000000]                  push dword [output_file_descriptor]
    70 0000008C FF15[00000000]                  call [fprintf]
    71 00000092 83C40C                          add esp,4*3
    72 00000095 59                              pop ecx
    73 00000096 46                              inc esi
    74 00000097 C605[8C000000]00                mov byte[digit],0
    75 0000009E E2CC                            loop write
    76 000000A0 FF35[1D000000]                  push dword [output_file_descriptor]
    77 000000A6 FF15[00000000]                  call [fclose]
    78 000000AC 83C404                          add esp,4
    79                                          out_of_loop:
    80                                          final:
    81                                          ; exit(0)
    82 000000AF 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    83 000000B1 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
