     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 5777                        a dw 0111011101010111b
    15 00000002 00000000                    b dd 0
    16                                      ; 0000000000000000
    17                                      ;the bits 0-3 of B are the same as the bits 1-4 of the result A XOR 0Ah
    18                                      ;the bits 4-11 of B are the same as the bits 7-14 of A
    19                                      ;the bits 12-19 of B have the value 0
    20                                      ;the bits 20-25 of B have the value 1
    21                                      ;the bits 26-31 of C are the same as the bits 3-8 of A complemented
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 B800000000                      mov eax, 0
    27 00000005 BB00000000                      mov ebx,0
    28 0000000A 668B1D[00000000]                mov bx,[a]
    29 00000011 6683F30A                        xor bx,000Ah ; bx = bx xor 00001010b = 0111011101011101b
    30 00000015 6683E31E                        and bx, 00000000000011110b ; separate the 1-4 bits of bx
    31 00000019 B101                            mov cl,1
    32 0000001B 66D3CB                          ror bx,cl 
    33 0000001E 09D8                            or eax,ebx ; the bits 0-3 of B are the same as the bits 1-4 of the result A XOR 0Ah
    34                                          
    35 00000020 668B1D[00000000]                mov bx,[a]
    36 00000027 6681E3807F                      and bx, 0111111110000000b; we isolate the 7-14 bits of A
    37 0000002C B103                            mov cl,3
    38 0000002E 66D3CB                          ror bx,cl
    39 00000031 09D8                            or eax,ebx ; the bits 4-11 of B are the same as the bits 7-14 of A
    40                                          
    41 00000033 83C800                          or eax, 00000000000000000000000000000000b ; the bits 12-19 of B have the value 0
    42                                         
    43 00000036 0D0000F003                      or eax , 00000011111100000000000000000000b ; the bits 20-25 of B have the value 1
    44                                          
    45 0000003B BB00000000                      mov ebx,0
    46 00000040 668B1D[00000000]                mov bx, [a]
    47 00000047 66F7D3                          not bx ; complement of bx, an alternative is not bx; add bx, 1b; or if the exercise refers to the one's complement, then simply we say not bx
    48 0000004A 6681E3F801                      and bx, 0000000111111000b ; we isolate the bits of 3-8 of A complement
    49 0000004F B107                            mov cl , 7
    50 00000051 66D3C3                          rol bx,cl
    51 00000054 B110                            mov cl,16
    52 00000056 D3C3                            rol ebx,cl
    53 00000058 09D8                            or eax,ebx ; the bits 26-31 of C are the same as the bits 3-8 of A complemented
    54 0000005A A3[02000000]                    mov [b],eax
    55                                          ; exit(0)
    56 0000005F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 00000061 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
