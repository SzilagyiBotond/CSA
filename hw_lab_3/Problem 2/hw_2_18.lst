     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          a db 1
    15 00000001 FEFF                        b dw -2
    16 00000003 03000000                    c dd 3
    17 00000007 0400000000000000            d dq 4
    18                                      ;(d-b)-a-(b-c)
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 8B1D[07000000]                  mov ebx, dword[d+0] 
    24 00000006 8B0D[0B000000]                  mov ecx, dword[d+4] ; ecx:ebx = d
    25 0000000C 66A1[01000000]                  mov ax,[b]
    26 00000012 98                              cwde
    27 00000013 99                              cdq ; edx:eax=b
    28 00000014 F8                              clc
    29 00000015 29C3                            sub ebx,eax
    30 00000017 19D1                            sbb ecx,edx ; ecx:ebx = d-b
    31                                          
    32 00000019 A0[00000000]                    mov al,[a]
    33 0000001E 6698                            cbw
    34 00000020 98                              cwde
    35 00000021 99                              cdq ; edx:eax=a
    36 00000022 F8                              clc
    37 00000023 29C3                            sub ebx,eax
    38 00000025 19D1                            sbb ecx,edx; ecx:ebx = (d-b)-a
    39 00000027 B800000000                      mov eax,0
    40 0000002C 8B15[03000000]                  mov edx,[c]
    41 00000032 66A1[01000000]                  mov ax,[b]
    42 00000038 98                              cwde ; eax=b
    43 00000039 29D0                            sub eax,edx 
    44 0000003B BA00000000                      mov edx,0
    45 00000040 99                              cdq ; edx:eax=(b-c)
    46 00000041 29C3                            sub ebx,eax
    47 00000043 19D1                            sbb ecx,edx ; ecx:ebx = (d-b)-a-(b-c)
    48                                          ; exit(0)
    49 00000045 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000047 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
