     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          a db 1
    15 00000001 0200                        b dw 2
    16 00000003 03000000                    c dd 3
    17 00000007 0400000000000000            d dq 4
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22 00000000 A1[07000000]                    mov eax, dword[d+0]
    23 00000005 8B15[0B000000]                  mov edx, dword[d+4] ; edx:eax = d
    24 0000000B 8B1D[07000000]                  mov ebx, dword[d+0] 
    25 00000011 8B0D[0B000000]                  mov ecx, dword[d+4] ; ecx:ebx = d
    26 00000017 F8                              clc ; clear carry flag
    27 00000018 01D8                            add eax,ebx 
    28 0000001A 11CA                            adc edx,ecx ; edx:eax = d+d
    29 0000001C F8                              clc
    30 0000001D BB00000000                      mov ebx,0
    31 00000022 B900000000                      mov ecx,0
    32 00000027 8A1D[00000000]                  mov bl,byte[a]; ecx:ebx=a
    33 0000002D 29D8                            sub eax,ebx
    34 0000002F 19CA                            sbb edx,ecx;edx:eax=(d+d)-a
    35 00000031 F8                              clc
    36 00000032 BB00000000                      mov ebx,0
    37 00000037 B900000000                      mov ecx,0
    38 0000003C 668B1D[01000000]                mov bx,word[b]; ecx:ebx=b
    39 00000043 29D8                            sub eax,ebx
    40 00000045 19CA                            sbb edx,ecx;edx:eax=(d+d)-a-b
    41 00000047 F8                              clc
    42 00000048 B900000000                      mov ecx,0
    43 0000004D 8B1D[03000000]                  mov ebx,dword[c];ecx:ebx=c
    44 00000053 29D8                            sub eax,ebx
    45 00000055 19CA                            sbb edx,ecx;edx:eax=(d+d)-a-b-c
    46                                          ; exit(0)
    47 00000057 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 00000059 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
