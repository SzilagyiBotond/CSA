     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          a db 1
    15 00000001 02                          b db 2
    16 00000002 0300                        c dw 3
    17 00000004 04000000                    e dd 4
    18 00000008 0500000000000000            x dq 5
    19                                  ; our code starts here
    20                                  ;(a+b*c+2/c)/(2+a)+e+x - unsigned
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 A0[01000000]                    mov al,[b]
    25 00000005 B400                            mov ah,0
    26 00000007 66F725[02000000]                mul word[c] ; dx:ax=b*c
    27 0000000E 8A1D[00000000]                  mov bl,[a]
    28 00000014 B700                            mov bh,0  
    29 00000016 66B90000                        mov cx,0 ; cx:bx=a
    30 0000001A F8                              clc
    31 0000001B 6601D8                          add ax,bx
    32 0000001E 6611CA                          adc dx,cx ; dx:ax=a+b*c
    33 00000021 6689D1                          mov cx,dx
    34 00000024 6689C3                          mov bx,ax ; cx:bx=a+b*c
    35 00000027 66BA0000                        mov dx,0
    36 0000002B 66B80200                        mov ax,2
    37 0000002F 66F735[02000000]                div word[c] ; ax=2/c
    38 00000036 66BA0000                        mov dx,0 ; dx:ax=2/c
    39 0000003A F8                              clc
    40 0000003B 6601D8                          add ax,bx
    41 0000003E 6611CA                          adc dx,cx ; dx:ax=a+b*c+2/c
    42 00000041 B102                            mov cl,2
    43 00000043 020D[00000000]                  add cl, [a]
    44 00000049 B500                            mov ch , 0 ; cx=2+a
    45 0000004B 66F7F1                          div cx ; ax=(a+b*c+2/c)/(2+a)
    46 0000004E BA00000000                      mov edx,0
    47 00000053 6689C2                          mov dx,ax ; edx=(a+b*c+2/c)/(2+a)
    48 00000056 0315[04000000]                  add edx,[e] ; edx=(a+b*c+2/c)/(2+a)+e
    49 0000005C 89D0                            mov eax,edx 
    50 0000005E BA00000000                      mov edx,0 ; edx:eax=(a+b*c+2/c)/(2+a)+e
    51 00000063 8B1D[08000000]                  mov ebx, dword[x+0]
    52 00000069 8B0D[0C000000]                  mov ecx, dword[x+4]; ecx:ebx = x
    53 0000006F F8                              clc
    54 00000070 01D8                            add eax,ebx
    55 00000072 11CA                            adc edx,ecx ; edx:eax =  (a+b*c+2/c)/(2+a)+e+x
    56                                          ; exit(0)
    57 00000074 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 00000076 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
